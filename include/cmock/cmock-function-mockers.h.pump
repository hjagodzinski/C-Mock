$$ -*- mode: c++; -*-
$$ This is a Pump source file.  Please use Pump to convert it to
$$ cmock-function-mockers.h.  Pump (pump.py) can be found in
$$ googletest/scripts.
$$
$var n = 10  $$ The maximum arity we support.
// Copyright 2013, Hubert Jagodziński
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Author: hubert.jagodzinski@gmail.com (Hubert Jagodziński)

// C Mock - extension to Google Mock framework allowing for writing C mock functions.
//
// This file implements C function mockers of various arities.

#ifndef CMOCK_INCLUDE_CMOCK_CMOCK_FUNCTION_MOCKERS_H_
#define CMOCK_INCLUDE_CMOCK_CMOCK_FUNCTION_MOCKERS_H_

#include <dlfcn.h>

#include <sstream>
#include <stdexcept>

$range i 0..n

$for i [[
$range j 1..i
$var call_args = [[$for j, [[cmock_a$j]]]]
$var declare_args = [[$for j, [[GMOCK_ARG_(, $j, F) cmock_a$j]]]]
$var matcher_args = [[$for j, [[GMOCK_MATCHER_(, $j, F) cmock_a$j]]]]

#define DECLARE_FUNCTION_MOCK$i(c, n, F) \
class c \
{ \
    typedef GMOCK_RESULT_(, F) (*func_type)($declare_args); \
\
    public: \
        static func_type real; \
\
        c(); \
        ~c(); \
\
        GMOCK_RESULT_(, F) operator()($declare_args); \
        ::testing::MockSpec<F>& cmock_func($matcher_args); \
\
    private: \
        static func_type lookup(); \
        static GMOCK_RESULT_(, F) call($declare_args); \
\
        static c *instance; \
\
        ::testing::FunctionMocker<F> mocker; \
\
        friend GMOCK_RESULT_(, F) n($declare_args); \
};

#define IMPLEMENT_FUNCTION_MOCK$i(c, n, F) \
c::c() { \
    instance = this; \
} \
\
c::~c() { \
    instance = NULL; \
} \
\
GMOCK_RESULT_(, F) c::operator()($declare_args) { \
    GTEST_COMPILE_ASSERT_(::std::tr1::tuple_size< \
    ::testing::internal::Function<F>::ArgumentTuple>::value == $i, \
     this_method_does_not_take_$i[[]]_argument[[$if i != 1 [[s]]]]); \
     mocker.SetOwnerAndName(this, #n); \
     return mocker.Invoke($call_args); \
} \
\
::testing::MockSpec<F>& c::cmock_func($matcher_args) { \
    mocker.RegisterOwner(this); \
    return mocker.With($call_args); \
} \
\
c::func_type c::lookup() { \
    return (c::func_type)dlsym(RTLD_NEXT, #n); \
} \
\
GMOCK_RESULT_(, F) c::call($declare_args) { \
    if (instance != NULL) { \
        return (*instance)($call_args); \
    } \
\
    if (real == NULL) { \
        std::ostringstream msg; \
        msg << "Error: Function " << #n; \
        msg << " not found. Neither mock nor real function is present."; \
        throw std::logic_error(msg.str()); \
    } \
    return real($call_args); \
} \
\
c *c::instance = NULL; \
c::func_type c::real = lookup(); \
\
GMOCK_RESULT_(, F) n($declare_args) { \
    return c::call($call_args); \
}

]]

#endif // CMOCK_INCLUDE_CMOCK_CMOCK_FUNCTION_MOCKERS_H_
