$$ -*- mode: c++; -*-
$$ This is a Pump source file.  Please use Pump to convert it to
$$ cmock-function-mockers.h.  Pump (pump.py) can be found in
$$ googletest/scripts.
$$
$var n = 10  $$ The maximum arity we support.
// Copyright 2013, Hubert Jagodziński
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Author: hubert.jagodzinski@gmail.com (Hubert Jagodziński)

// C Mock - extension to Google Mock framework allowing for writing C mock functions.
//
// This file implements C function mockers of various arities.

#ifndef CMOCK_INCLUDE_CMOCK_CMOCK_FUNCTION_CLASS_MOCKERS_H_
#define CMOCK_INCLUDE_CMOCK_CMOCK_FUNCTION_CLASS_MOCKERS_H_

#include <dlfcn.h>

#include <sstream>
#include <stdexcept>

// Allows finding an instance of a class:
//   class Foo : public CMockMocker<Foo> { ... }
//   Foo *p = CMockMocker<Foo>::cmock_get_instance();
template<typename T>
class CMockMocker
{
public:
	CMockMocker()
	{
		instance = (T *)this;
	}

	~CMockMocker()
	{
		instance = (T *)NULL;
	}

	static T *cmock_get_instance() { return instance; }
	
private:
	static T *instance;
};

template<typename T>
T *CMockMocker<T>::instance = NULL;

// Find the real implementation of a mocked function
static inline void *
cmock_lookup(const char *fname)
{
    return dlsym(RTLD_NEXT, fname);
}

$range i 0..n

$for i [[
$range j 1..i
$var call_args = [[$for j, [[cmock_a$j]]]]
$var declare_args = [[$for j, [[GMOCK_ARG_(, $j, F) cmock_a$j]]]]
$var matcher_args = [[$for j, [[GMOCK_MATCHER_(, $j, F) cmock_a$j]]]]

#define CMOCK_MOCK_FUNCTION$i(c, n, F) \
static GMOCK_RESULT_(, F) (*__cmock_real_##c##_##n)($declare_args) = \
	(GMOCK_RESULT_(, F) (*)($declare_args))cmock_lookup(#n); \
\
GMOCK_RESULT_(, F) n($declare_args) { \
    c *mock = c::cmock_get_instance(); \
    if (mock != NULL) { \
        return mock->n($call_args); \
    } \
	\
    if (__cmock_real_##c##_##n == NULL) { \
        std::ostringstream msg; \
        msg << "Error: Function " << #n; \
        msg << " not found. Neither mock nor real function is present."; \
        throw std::logic_error(msg.str()); \
    } \
    return __cmock_real_##c##_##n($call_args); \
} \

]]

#endif // CMOCK_INCLUDE_CMOCK_CMOCK_FUNCTION_CLASS_MOCKERS_H_
